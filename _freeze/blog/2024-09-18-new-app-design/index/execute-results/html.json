{
  "hash": "033ebf223f3d636b296018bd01806b5a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: New architecture in v0.3.0!\ndescription: |\n  We're releasing v0.3.0, and with it multiple breaking changes from an architecture overall.\ndate: '2024-09-18'\nimage: \"image.png\"\ntwitter-card:\n  creator: \"@johnhelveston\"\n  site: \"@johnhelveston\"\n  image: image.png\n  card-style: summary_large_image\n  image-width: 150\n  image-height: 150\ncategories:\n  - R\nformat: html\nexecute: \n  eval: false\ntoc: true\nlightbox: true\n---\n\n\n\n\nThe surveydown package is only about a month and a half old, and thanks to many early users we learned about some design flaws that needed to be fixed. As a result, with the release of {surveydown} 0.3.0, the package has undergone a major overhaul to improve security, modularity, and extensibility. \n\nWe introduced some major breaking changes in this release, so we felt we should make a blog post to both explain why we felt these changes were needed as well as introduce the new architecture we have adopted.\n\n## Motivation\n\nIn the original conception of surveydown, the entire survey was defined in a single Quarto shiny document that would render into a shiny app. While this was a rather parsimonious design, it also had some flaws that weren't immediately apparent.\n\nPerhaps the largest issue was **page security** (see [this issue](https://github.com/surveydown-dev/surveydown/issues/93)). With Quarto shiny documents, the qmd file is first rendered into a static html page that is then used to define the elements of the user interface in the resulting shiny app. This meant that for us to introduce _pages_, we relied on a combination of JS and CSS to hide and show the page divs based on users clicking on next buttons. While this resulted in a nice user experience, under the hood the entire app was still just one big html page with all of the content available. \n\nThis design meant that anyone could still see the source code to any component of the survey they wanted. A user could simply right-click and open \"Inspect\" then manually change the CSS of a page div from `style=\"display: none;\"` to `style=\"display: show;\"` and boom - the \"page\" would appear!\n\nThis was obviously a major security issue as pages with things like completion codes or redirect buttons at the end could be easily shown without going through the whole survey. The only solution was an architectural overhaul that would only show the content on one page at a time.\n\n## New architecture\n\nThe new architecture employs a traditional shiny app with a two-file design:\n\n1. `survey.qmd`: Contains the survey content (pages, questions, etc). \n2. `app.R`: Contains the ui settings (themes, colors, fonts, etc.) and server logic (conditional skipping / display, etc.).\n\nThey look something like this:\n\n::: {layout-ncol=2}\n\n#### `survey.qmd` file\n\n![](survey.png)\n\n#### `app.R` file\n\n![](app.png)\n\n:::\n\nThis approach allows us to separate the _survey content_ (in the `survey.qmd` file) from the _survey logic_ (in the `app.R` file), which comes with a few benefits:\n\n1. **Security**: Since the rendered survey content is no longer directly embedded in the app as a single html page, it makes it much harder for users to tamper with the content. Only the content on one page at a time will be rendered by the server.\n2. **Extensibility**: While we originally designed surveydown for Quarto, you could just as easily render a RMarkdown document instead of a Quarto document as the content now just renders to a static html page.\n3. **Clarity**: With two files, it is now clearer where the survey content versus control logic should be defined. Before, all of the server logic was in a single server code chunk at the end of the `survey.qmd` file, which required the user to scroll up and down to edit the server logic versus the survey content. Now a user can have both files open in two tabs in RStudio and more easily edit the survey content and server content.\n4. **Simplicity**: The new design eliminates the need for a Quarto extension to render the survey. This allows us to ship all of the core functionality of surveydown as a single R package, which is installed globally on your system.\n\nThe updated documentation of the [Survey Components](https://surveydown.org/survey-components.html) page reflects this new design.\n\n## New page architecture\n\nThe motivation to secure the page content led to a totally new approach to designing the survey pages. Our new approach leverages the `sd_config()` function to render the `survey.qmd` into a static html page and then parse it into a list of page objects. Each page object is itself a list of elements, including the page ID, question IDs, etc., as well as the rendered html content for that page. \n\nThe `sd_server()` function now uses this list of page objects to display one page at a time via a `shiny::renderUI()` function into a single \"main\" output. This approach allowed us to fine tune the control of what content is being served, eliminating the ability of survey respondents to see anything other than the content on the current page. \n\nThis approach also gave us the opportunity to overhaul how pagination works in general. Previously, users had to add a `sd_next(next_page = \"page_id\")` button at the end of each page, making sure to specify the next page to go to. This was a bit annoying as most of the time you just want to go to the next page, so specifying it felt redundant. Now users can simply add `sd_next()` at the bottom of each page and the server will go to the next page by default. If you want to direct the respondent to a different page, then you specify the target page using `sd_next(next_page = \"page_id\")`.\n\n## Changing the look and feel of the survey\n\nInside the `app.R` file, there is now a `sd_ui()` function where you can define the look and feel of the survey. This includes things like the theme, colors, fonts, and even the color and position of the progress bar. \n\nPreviously this was all defined in the yaml header of the `survey.qmd` file, which required the use of a Quarto extension and some rather hacky methods to implement it. Now this extension is no longer needed, and all of the functionality is built into the `sd_ui()` function. This provides a much cleaner interface for users to customize the look and feel of their survey and makes it easier to version control changes as users only need to update the surveydown package to get the latest ui features. See the [documentation](https://surveydown.org/survey-components.html#ui) on the `sd_ui()` function for more details.\n\n## Our apologies\n\nThat's about it for the changes with v0.3.0. We want to send our deepest apologies for anyone who has already begun a study using the orginal design. The most recent version prior to v0.3.0 was v0.2.4, so this is the version you should install if you want to stick with the old design. That said, all development will now continue on this new design, so we strongly recommend updating to the new version and converting any existing surveys to the new design. The biggest change you'll need to make is to move your server logic out of the `survey.qmd` file and into the `app.R` file. We've also updated all our [demos](https://surveydown.org/demos) to the new design, so you can refer to these for examples on how to convert your existing surveys.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}