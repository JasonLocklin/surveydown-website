---
title: "Configuration Options"
---

> This page explains the various configuration options currently supported by surveydown

All survey configuration options are defined with the `sd_config()` function in the server code chunk.

# Conditional display

## Basic conditional display

> Use the `show_if` argument to control basic conditional display logic.

To have a question display conditionally upon the value of another question, you need to define both the triggering question and the target question. For example, let's say we have a multiple choice question about people's favorite penguin type, and the last option is "other". If the respondent chose it, you may want a second question to popup that allows them to specify the other penguin type. To implement this, you would need to first define both questions, e.g.:

```{r}
sd_question(
  type  = 'mc',
  id    = 'penguins',
  label = "Which is your favorite type of penguin?",
  option = c(
    'Ad√©lie'    = 'adelie',
    'Chinstrap' = 'chinstrap',
    'Gentoo'    = 'gentoo',
    'Other'     = 'other'
  )
)

sd_question(
  type  = "text",
  id    = "penguins_other",
  label = "Please specify the other penguin type:"
)
```

Then in the server code chunk, you can use the `show_if` argument to define that the `penguins_other` question would only be shown if the respondent chose the `other` option in the `penguins` question, like this:

```{r}
config <- sd_config(
  show_if = tibble::tribble(
    ~question_id,  ~question_value, ~target,
    "penguins",    "other",         "penguins_other"
  )
)
```

This will make the `penguins_other` question only appear if the respondent chose the `other` option in the `penguins` question.

Here we're using the `tibble::tribble()` function to define a data frame with three columns:

- `question_id`: The `id` of the triggering question.
- `question_value`: The triggering value.
- `target`: The `id` of the target question to display.

You don't have to use `tibble::tribble()`, and in fact if you have a lot of `show_if` conditions, then you could create a csv file with all of your conditions in it and read it in to set the `show_if` conditions (just make sure the header has the same three column names), e.g.:

```{r}
config <- sd_config(
  show_if = readr::read_csv('path/to/show_if_conditions.csv')
  )
)
```

## Custom conditional display

> Use the `show_if_custom` argument to control custom conditional display logic.

Insert example here

# Conditional skipping

## Basic skipping

> Use the `skip_if` argument to control basic skipping logic.

Often times you'll want to send people to different parts of the survey based on responses to questions. For example, let's say you want to screen out people who do not own a vehicle. To do this, you would first define a question about their vehicle ownership, e.g.:

```{r}
sd_question(
  type  = 'mc',
  id    = 'vehicle_ownership',
  label = "Do you own your vehicle?",
  option = c(
    'Yes' = 'yes',
    'No'  = 'no'
  )
)
```

Then in the server code chunk, you can use the `skip_if` argument in `sd_config()` to define the behavior of the next button on the page where you ask this question, like this:

```{r}
config <- sd_config(
  skip_if = tibble::tribble(
    ~question_id,        ~question_value, ~target,
    "vehicle_ownership", "no",            "screenout"
  )
)
```

This sets up a condition where the respondent will be sent to a page named `screenout` if they choose `no` on the `vehicle_ownership` question. You could put such a page at the end of the survey, something like this:

```
::: {#screenout .sd-page}

Sorry, but you are not qualified to take our survey.

:::
```

Notice that we don't have a `sd_next()` on this screenout page. That is how you define an end point for the survey taker. If there's no "Next" button, then they cannot navigate anywhere else, so the survey is over.

## Custom skipping

> Use the `skip_if_custom` argument to control custom skipping logic.

Insert example here

# Required responses

> Use the `required_questions` argument to control required responses.

By default, no questions are required. However, you can make questions required by adding the question `id` to the `required_questions` argument in `sd_config()`, like this:

```{r}
config <- sd_config(
  required_questions = c("vehicle_ownership", "penguins_other")
)
```

This will make the respondent unable to proceed until they have answered the required questions. It will also place a red asterisk (*) next to the question label to indicate that the question is required.

You can also make all questions required by setting `all_questions_required = TRUE` like this:

```{r}
config <- sd_config(
  all_questions_required = TRUE
)
```

# Starting page 

> Use the `start_page` argument to control the starting page.

When editing your survey, it can be helpful to start the survey at a specific page. You can define the starting page by setting the `start_page` argument to a page `id` in the `sd_config()` function, like this:

```{r}
config <- sd_config(
  start_page = "page_id"
)
```

# Show all pages

> Use the `show_all_pages` argument to show al pages at once.

By setting `show_all_pages = TRUE` in the `sd_config()` function, all pages will be shown when the survey loads. This can be helpful for quickly previewing the survey content and / or printing out the entire survey as a PDF.

# Admin page

> Use the `admin_page` argument to control whether the admin page is created.

By default, the admin page is not created. But if you want one, set `admin_page` to `TRUE` inside the `sd_config()` function, like this:

```{r}
config <- sd_config(
  admin_page = TRUE
)
```

When the admin page is enabled, you will be able to access the page by adding `?admin` to the end of the survey URL, e.g. `https://myname.shinyapps.io/?admin`. This will display a login page with a single "Password" parameter, which is the password set using `sd_set_password()`. See the [Setting a Password](password.qmd) page for details.

The admin page has the following features:

- **Pause Survey**: Once clicked, the shiny app pauses all instances replacing questions with a placeholder "Paused Survey" page. **Status: Non-functional**
- **Pause DB**: Once clicked, the `pause` arugment set in `sd_database()` will be set to `TRUE`, pausing all database uploads. **Status: Non-functional**
- **Download Data**: Once clicked, the most recent table instance is pulled from the database and downloaded locally as a .csv file. 
- **Admin Logout and Return to Survey**: Once clicked, the admin page will be logged out and the survey will be returned to the start page.
- **Survey Data**: Pulls most recent instance of the database and displays the data. 
