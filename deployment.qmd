---
title: "Deploying Your Survey"
---

Once you have previewed and tested your survey and are ready to field it, it is time to make it live for respondents to fill out.

To deploy your survey, you'll need to have the following recipes ready:

1. Your survey project made by Quarto that is properly rendered locally.
2. Your supabase project with its credentials defined in your survey `.qmd` file. See the [Database Settings](database.qmd) page for details.
3. An account on [shinyapps](https://www.shinyapps.io), which will be used for survey online deployment.

These steps are easy to follow. We will go through one by one.

# Demo Survey

If you have trouble constructing your own survey, we have prepared a demo survey:

1. [Online demo survey](https://pingfan.shinyapps.io/demo/)
2. [GitHub repository](https://github.com/jhelvy/surveydown_demo)

This survey was made on [RStudio](https://posit.co/products/open-source/rstudio/) using the {surveydown} R package and the surveydown Quarto extension, with survey data stored on [supabase](https://supabase.com), and its online website deployed on [shinyapps](https://www.shinyapps.io).

# Step 1: Survey Project

## Step 1-1: Construct your survey

Construct your survey using the {surveydown} R package and the surveydown Quarto extension.

The previous articles in **Usage Guide** are sufficient to guide you through the survey construction process.

## Step 1-2: Set your password

One important setting is the **password** of your supabase project. Here's how.

While you set up your supabase project, you will create a password for it. This password will then be defined in your survey project. In the very end of your survey `.qmd` file, you'll need to define the `db` variable, which should be the settings of your supabase project. There is an argument called `password`. You can directly paste your password here as `password = "my_password"`, but it's not recommended since this will make your supabase project unsafe.

We recommend you to write `password = Sys.getenv("SUPABASE_PASSWORD")`, like this:

```{r eval=FALSE}
db <- sd_database(
  # Other settings...
  password = Sys.getenv("SUPABASE_PASSWORD")
)
```

Then, define the password using the `sd_set_password()` function. For example, if your password is `my_password`, you should run `sd_set_password("my_password")` in the R Console.

Great! Now you have your supabase password successfully defined in your survey project!

If you are interested, below are the details of what `sd_set_password()` does:

1.  It creates an `.Renviron` file or writes into an existing one.
2.  In this `.Renviron` file, it writes in `SUPABASE_PASSWORD=my_password`, where `"my_password"` is whatever your argument of the `sd_set_password()` function.
3.  If there is a previously defined `SUPABASE_PASSWORD` in `.Renviron`, it will be overwritten, so you are safe to run this function multiple times.
4.  It adds `.Renviron` into `.gitignore` to avoid it being pushed to GitHub thus keeps your password safe. If you run multiple times, `.Renviron` will appear only once in `.gitignore`.

## Step 1-3: Render your `.qmd` file

This is simple: just hit **Render** or `cmd`/`ctrl` + `shift` + `K` (Mac/Win). But the reason why I make this a stand-alone step is that, WITHOUT rendering your `.qmd` file, your survey CANNOT be deployed online.

One more thing... If you fail to deploy locally while you have set every argument correctly in your `db` variable, try to define `gssencmode = "disable"` in your `db` variable:

```{r eval=FALSE}
db <- sd_database(
  # Other settings...
  gssencmode = "disable"
)
```

This can help solve your connection problem. The value of `gssencmode` is set to `"prefer"` by default.

# Step 2: Supabase Project

This is covered in [5. Database Setup](../doc/database_setup.html). I want to further mention that you don't need to actively create any table on your supabase project. In your `db` variable of your `.qmd` file, there is a `table_name` argument. Whatever name you define here will become the table name of your supabase:

```{r eval=FALSE}
db <- sd_database(
  # Other settings...
  table_name = "demo"
)
```

In the above example, the table name in my supabase project will be `"demo"`. If your survey project runs successfully locally and can have survey data collected in supabase, you are ready for your online deployment.

# Step 3: Online Deployment

So this is our final step: to deploy your survey online. I'm glad you've made this far! You are almost there!

We'll use [shinyapps.io](https://www.shinyapps.io). Now before we start, here are two explanations to clear out your possible questions:

1.  [shinyapps.io](https://www.shinyapps.io) can support both [Shiny Apps](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html) and [Quarto Shiny Documents](https://quarto.org/docs/dashboards/interactivity/shiny-r.html). In our case, our survey is considered as a Quarto Shiny Document.
2.  [Quarto Pub](https://quartopub.com) is also a website publishing platform. In fact, both Quarto Pub and shinyapps.io are provided by [Posit](https://posit.co). However, we DON'T use Quarto Pub for our survey deployment. The core reason is that, shinyapps.io can make interactive websites, but Quarto Pub only makes static websites. A survey is apparently an interactive website, so it's compatible with shinyapps.io, not Quarto Pub.

To start using shinyapps.io, you'll need to create an account and follow the basic instructions to set up your sub-domain and authorize your IDE. See more information [here](https://docs.posit.co/shinyapps.io/guide/getting_started/).

Once you have your account and your sub-domain ready, it's time to deploy your survey website.

Make sure you have the [rsconnect](https://rstudio.github.io/rsconnect/) R package installed (You should have done this while you authorize your IDE):

```{r eval=FALSE}
install.packages('rsconnect')
```

The simplest way is to run this:

```{r eval=FALSE}
rsconnect::deployDoc("your_survey.qmd")
```

The URL of this page will be your domain followed by `/your_survey`, which means the name of your `.qmd` file will be in the URL. The tab name of the HTML page is also `your_survey`. Better give a good name to your `.qmd` file.

**Again, you'll need to firstly render locally and make sure it works properly. Otherwise, this deployment will fail.**

If you want to define a different tab name for your survey page, run:

```{r eval=FALSE}
rsconnect::deployDoc(
  doc = "your_survey.qmd",
  appName = "Survey Name"
)
```

Now you should have your survey site deployed. The survey is now served on **shinyapps.io**, with its data stored on **supabase**. Congratulations!

Further explanation (with my personal interpretation) of the deployment functions:

In rsconnect, there are two functions that can be used for deployment: `deployApp()` and `deployDoc()`. They serve different purposes and should NOT be mix-used.

1.  `deployApp()` is used to deploy a Shiny App. It doesn't work for `.qmd`, but works for Shiny App and `.rmd`, and it accepts multiple files.
2.  `deployDoc()` is used to deploy a Quarto Shiny Document. It works for a single file and tries to "automatically discover dependencies" (direct paste from [official instructions](https://rstudio.github.io/rsconnect/reference/deployDoc.html)).
3.  Since our survey is a Quarto Shiny Document, we use `deployDoc()`.

> I guess `deployDoc()` is a newer function that specifically works for `.qmd`. I have a feeling that this function is specifically made for `.qmd` to match the fact of "single document" and "dependencies". In our case, `deployDoc()` is a perfect match.
