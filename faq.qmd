---
title: "Frequently Asked Questions"
toc-title: "Questions"
---

<style>
h2 {
  font-size: 1.3em; 
}
</style>

::: {.callout-note}

Have a question but don't see an answer here? Feel free to make a post on GitHub:

- Post a bug report or documentation issue on the [GitHub repo issues page](https://github.com/surveydown-dev/surveydown/issues).
- Ask a question, make a feature request, start a discussion, or show off your project on the [discussion board](https://github.com/orgs/surveydown-dev/discussions).

:::

## How do I make a question required?

Use the `required_questions` argument in `sd_server()` to control required responses (see the [required questions](server-options.qmd#required-questions) page for more details).

## Why is my shinyapps deployment failing?

First, make sure everything is correctly defined, including your Supabase project settings and password settings. The password in your project folder should be the same as your Supabase project password (see [here](password.qmd) for how to set the password). Then, make sure your survey runs on your local machine and can successfully link with your Supabase project table. With these confirmed, your shinyapps deployment should work without problem.

If you still encounter an error (e.g., the page shows the app failed to start, or you see the page but it doesn't run properly), try clearing your cache. The simplest way to do so is to **reboot your computer**. It may also help if you delete previously generated files, such as the `survey.html` file if you rendered it and the `rsconnect` folder. After re-rendering, you should be able to deploy the app without error.

## Why can't I install the package?

**1. Install from the repo (recommended)**

Usually, we install a package by the `install.packages()` function. For example:

```{r}
#| eval: false
install.packages("tidyverse")
```

However, this function is only effective for packages on [CRAN ](https://cran.r-project.org), a database that stores the R packages. Since `surveydown` is still under construction, it's not available on CRAN yet (but it will be).

Now the recommended way of installing `surveydown` is to install it directly from its GitHub repo:

```{r}
#| eval: false
remotes::install_github("surveydown-dev/surveydown", force = TRUE)
```

**2. Download the source code and install locally (alternative)**

If you still cannot have your package installed, it could be because that your path was managed by some package managing system like [Anaconda](https://www.anaconda.com). An alternative is to download the zip file of `surveydown` and install it locally.

To download the zip file, go the the [surveydown repo](https://github.com/surveydown-dev/surveydown), click on the green "Code" button and click on "Download Zip", or simplify click on [this link](https://github.com/surveydown-dev/surveydown/archive/refs/heads/main.zip).

Unzip this repo, and open the `surveydown.Rproj` file. In your R Console panel, run this code to install:

```{r}
#| eval: false
devtools::install(force = TRUE)
```

## How to set a password for my surveydown project, and why do I need a password?

In [Supabase](https://supabase.com) (the database we use for surveydown), we need a password to access the database and establish connection. In surveydown, we've prepared a function for you: `sd_set_password()`. This function helps you set up your password that can be used to connect to Supabase. It is also the password for your admin page.

**Below is what `sd_set_password()` exactly does:**

For example, say your password is `MyPassword`. Then you define your password by:

```{r}
#| eval: false
sd_set_password("MyPassword")
```

After you defined your password, **restart** your R session by clicking on "Session" on your menu and choose "Restart R".

This will save your password into a newly created `.Renviron` file. The statement looks like this:

```{r}
#| eval: false
SURVEYDOWN_PASSWORD=MyPassword
```

Then, this function also adds the `.Renviron` file into your `.gitignore` file (if you want to store your project on GitHub), so that it won't be pushed to your GitHub repo. Your password is always stored locally on your machine.

You need to make sure that this password you defined matches with your Supabase project (in this case, it should be `MyPassword`).

There is no defined sequence in these 2 above moves. You can define your Supabase project password first, and then define your local password using `sd_set_password()`, or you can do it inversely. The only thing that matters is when you attempt to connect to Supabase using your survey, these 2 passwords should match.

For more information about setting password, proceed to the [password](password.qmd) page.
